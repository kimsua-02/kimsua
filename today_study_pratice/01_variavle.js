/* 숫자 타입
    - 자바의 경우 정수와 실수를 구분해 다양한 숫자 타입을 제공.
     ▶ 하지만 자바스크립트의 경우 하나의 타입만 존재함.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -     
    - 자료형의 크기가 동적으로 달라짐.
     ▶ 동적(dynamic) : 상황에 따라 실시간으로 변하는 성질.
     ▶ 정적(static) : 한 번 정했을 시 변하지 않고 계속해서 유지되는 성질.
*/

let integer = 10;   // 10 이란 값을 integer 이라는 변수에 입력(변수명이 정수를 의미)
let  double = 5.5;  // 5.5 란 값을 double 이라는 변수에 입력(변수명이 소수를 의미)
let negative = -10; // -10 이란 값을 negative 라는 변수에 입력(변수명이 음수를 의미)

integer = "김수아"; // integer 변수 안에 '김수아' 라는 값을 넣음

console.log(integer); // 'console.log( ... ) 은 자바에서 println(" ... ") 을 의미함. 출력을 하기위한 함수라고 보면 됨."
// 출력 값 : 김수아  

console.log("=========================================================");

/* 숫자 타입은 추가적으로 세 가지 특별한 값도 표현할 수 있음.
    ▶ Infinity = 양의 무한대
    ▶ -Infinity = 음의 무한대
    ▶ NaN = 산술 연산 불가능 
*/

console.log(10/10);          // 출력 값 : 1
console.log(10/-0);          // 출력 값 : -Infinity
console.log(1 * "문자열");   // 출력 값 : NaN

// ===================================================================================
console.log("=========================================================");

/* 문자열 타입
    - 문자열 타입은 텍스트를 나타내는데 사용함.
     ▶ 작은 따옴표 / 큰 따옴표 / 뺵틱으로 텍스트를 감쌈.
     ▶ 자바스크립트는 문자열을 윈시 타입으로 표현함.
        -> 자바는 문자열을 객체로 표현.
*/

let String;
String = 'javascript';
String = "javascript";
String = 'javascript';

let string = '작은 따옴표를 감싼 문자열 내의 "큰 따옴표"는 문자열로 인식';
String = "큰 따옴표를 감싼 문자열 내의 '작은 따옴표'는 문자열로 인식";
console.log(String);
console.log(string);
// 자바 스크립트 특징
//  : JAVA와 달리 큰 따옴표 작은 따옴표 구분 없이 사용 가능.
//    ▶ 큰 따옴표 안에 작은 따옴표
//    ▶ 작은 따옴표 안에 큰 따옴표
//      → 모두 사용 가능하며, 문자열로 인식함.

// ===================================================================================
console.log("=========================================================");

// 템플릿 리터럴
// ES6 부터 도입된 멀티라인 문자열
let str = "안녕하세요 \n 김수아입니다.";  // 기존 줄바꿈 방식
let multi = `안녕하세요
김수아입니다. 잘 부탁드립니다.`;


console.log(str);
// 출력 값 ↓
// 안녕하세요
//  김수아입니다.
// 안녕하세요(띄어쓰기)\n(띄어쓰기)김수아입니다. ← 라고 입력했기 때문에 출력이 줄바꿈 후 띄어쓰기 처리가 됨.
console.log("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");

console.log(multi);
// 출력 값 ↓ 
// 안녕하세요
// 김수아입니다. 잘 부탁드립니다. ← 줄바꿈 부분을 엔터키로 지정했기 때문에 문장의 맨 앞 부분 공백 처리가 전혀 없이 출력됨.

console.log("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");
let firstName = "김";
let lastName = "수아";

console.log("헤이 모두들 안녕 난 " + firstName + lastName + " 라고 해 ~ ");  // 기존 방식
// ↑ 글자를 + 로 연결하는 기존 방식.

console.log("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");

console.log(`안녕하세요 ${firstName}${lastName} 입니다.`); // 자바 스크립트 방식
// ↑ 글자를 빽틴 안에 넣고 선언하는 방식. 출력시 한 줄로 잘 ~ 나옴.

// ===================================================================================
console.log("=========================================================");

let flag = true;
console.log(flag);
// 출력 값 : true

flag = false;
console.log(flag);
// 출력 값 : false


/* undefined 타입
    ▶ let 키워드로 선언한 변수는 암묵적으로 undefined로 초기화 됨.
    ▶ 변수를 선언한 후 값을 할당하지 않은 변수를 참조할 시 undefined 가 반환됨.
    ▶ undefiend : 자바 스크립트 엔진이 변수를 초기화 할 때 사용하는 값.
    ▶ 개발자가 의도적으로 할당하는 것은 본래의 취지와 어긋날 뿐더러 혼란을 야기할 수 있음.
        → 그러하여 의도적인 빈 값은 null 을 주는 게 바람직함.
*/

let test;
console.log(test);
// 출력 값 : undefined

// const 는 상수이기 때문에 undefined 로 초기화 불가능함

/* null 타입
    ▶ 변수에 값이 없다는 것을 의도적으로 명시할 때 사용.
*/

let nullType = "something";
// 변수 nullType 생성(변수명) 후 "something" 라는 글자를 넣음.

nullType = null;
// nullType 는 값이 없음. 
// [예시] a = null; 
//        console.log(a)  → a 는 null 이므로 0이나 1인 숫자도 없고, "study" 인 글자도 없음. 값은 아무것도 없음.

console.log(nullType);
// nullType 에 아무것도 들어있지 않은 null 값은 선언해줬기 때문에 
// 해당 코드줄은 선언해놓은 null이 출력됨.